pipeline {
    agent any

    tools {
        maven 'Maven Apache'

    }
    parameters {
        choice(name: 'ENVIRONMENT', choices: ['dev', 'test', 'prod'], description: 'Environment to deploy')
        booleanParam(name: 'EXECUTE_JAR', defaultValue: true, description: 'Enable JAR')
        string(name: 'URL_GIT', defaultValue: 'https://github.com/SraBrown/test_pipeline.git', description: 'Branch Specifier')
        string(name: 'BRANCH', defaultValue: 'develop', description: 'Branch Specifier')
        choice(name: 'EXECUTE_SONAR', choices: ['Yes', 'No'], description: 'Execute SONAR?')
        choice(name: 'EXECUTE_JACOCO', choices: ['Yes', 'No'], description: 'Execute JACOCO?')
        string(name: 'TOKEN_SONAR', defaultValue: 'squ_65c191c06933b1c3ad3cf7fff9a7b59954f67a00', description: 'Token Sonar')
        string(name: 'JAVA_HOME', defaultValue: '/opt/java/openjdk', description: 'Enter Directory Java')
    }
    environment {
        SONARQUBE_SERVER = 'SonarQube' // Name of the SonarQube server in Jenkins
        SONAR_PROJECT_KEY = 'your-project-key'
        SONAR_PROJECT_NAME = 'Your Project Name'
        SONAR_PROJECT_VERSION = '1.0'
    }
    stages {
        stage('Checkout') {
            steps {
                echo 'Checkout the JAR!'
                checkout scmGit(branches: [[name: '$BRANCH']], extensions: [], userRemoteConfigs:
                        [[credentialsId: 'GITLAB_CREDENTIALS', url: "${params.URL_GIT}"]])

            }
        }
       stage('Test') {
                steps {
                    script {
                        if (params.EXECUTE_JAR) {
                            echo 'Starting Build, Execute Test and Jar!'
                            sh 'mvn clean test -Pcoverage'
                        }
                    }
                }
            }
        stage('Generate Code Coverage Report') {
            when {
                expression { params.EXECUTE_JACOCO == 'Yes' }
            }
            steps {
                // Run JaCoCo integrated with Maven Surefire
                sh 'mvn jacoco:report'
            }
        }
        stage('Dependency Analysis') {
            when {
                expression { params.EXECUTE_JACOCO == 'Yes' }
            }
            steps {
                // Run the OWASP Dependency-Check plugin
                sh 'mvn org.owasp:dependency-check-maven:check'
            }
        }
    stage('SonarQube Analysis') {
           when {
                expression { params.EXECUTE_SONAR == 'Yes' }
            }
            steps {
                script {
                    // Run SonarQube analysis
                    withSonarQubeEnv(${SONARQUBE_SERVER}) {
                        sh "sonar-scanner -Dsonar.projectKey=${SONAR_PROJECT_KEY} -Dsonar.projectName=${SONAR_PROJECT_NAME} -Dsonar.projectVersion=${SONAR_PROJECT_VERSION} -Dsonar.sources=src -Dsonar.host.url=http://localhost:9000 -Dsonar.login=${TOKEN_SONAR}"
                    }
                }
            }
        }
        stage('Quality Gate') {
        when {
                expression { params.EXECUTE_SONAR == 'Yes' }
            }
            steps {
                script {
                    // Wait for SonarQube analysis to finish and check quality gate status
                    timeout(time: 5, unit: 'MINUTES') {
                        waitForQualityGate abortPipeline: true
                    }
                }
            }
        }

     stage('Build') {
                steps {
                    script {
                        if (params.EXECUTE_JAR) {
                            echo 'Starting Build, Execute Test and Jar!'
                            sh 'mvn clean install'
                        }
                    }
                }
            }

    stage('Archive') {
            steps {
                // Archive the JAR file (adjust the path to your output file as necessary)
                archiveArtifacts artifacts: 'target/*.jar', fingerprint: true
            }
        }
    }
}

pipeline {
        agent any
        tools {
           maven 'Maven Apache'
          
        }
        parameters {
            choice(name: 'ENVIRONMENT', choices: ['dev', 'test', 'prod'], description: 'Environment to deploy')
            booleanParam(name: 'EXECUTE_JAR', defaultValue: true, description: 'Enable JAR')
            //string(name: 'URL_GIT', defaultValue: 'https://github.com/your-repo/your-project.git', description: 'Branch Specifier')
            string(name: 'URL_GIT', defaultValue: 'https://github.com/SraBrown/test_pipeline.git', description: 'Branch Specifier')
            string(name: 'BRANCH', defaultValue: 'develop', description: 'Branch Specifier')
            string(name: 'GITLAB_CREDENTIALS', defaultValue: 'INT-GIT-JENKINS', description: 'Name Token')
            choice(name: 'EXECUTE_SONAR', choices: ['Yes', 'No'], description: 'Execute SONAR?')
            choice(name: 'EXECUTE_JACOCO', choices: ['Yes', 'No'], description: 'Execute JACOCO?')
            string(name: 'JAVA_HOME', defaultValue: '/opt/java/openjdk', description: 'Enter Directory Java')
            choice(name: 'GENERATE_DOCKER', choices: ['Yes', 'No'], description: 'GENERATE DOCKER_IMAGEN?')
            string(name: 'SONARQUBE_SERVER', defaultValue: 'SonarQube', description: 'SONAR Server')
            string(name: 'SONAR_PROJECT_VERSION', defaultValue: '1.0', description: 'Sonar Project Name')
            string(name: 'SONAR_LOCALHOST', defaultValue: 'http://sonar:9000', description: 'Sonar Localhost')
        }
        environment {
            SONARQUBE_SERVER = "${params.SONARQUBE_SERVER}" // Name of the SonarQube server in Jenkins
            SONAR_PROJECT_VERSION = "${params.SONAR_PROJECT_VERSION}"
            SONAR_HOST = "${params.SONAR_LOCALHOST}"
            TOKEN_SONAR ='squ_65c191c06933b1c3ad3cf7fff9a7b59954f67a00'
            JACOCO_REPORT_PATH = 'target/jacoco.exec'      // Ruta al archivo de cobertura de JaCoCo
            DOCKER_IMAGE_NAME = 'dev.opentrends.net/A4012/spring-cloud-config:latest'
            NAME_ARTEFACT = ''
            DOCKER_REGISTRY = 'localhost:5000' // Cambia si tienes un registro diferente
            }
            stages {
                stage('Checkout') {
                    steps {
                        echo 'Checkout the JAR!'
                        checkout scmGit(branches: [[name: '$BRANCH']], extensions: [], userRemoteConfigs:
                                [[credentialsId: "${params.GITLAB_CREDENTIALS}", url: "${params.URL_GIT}"]])
        
                    }
                }
               stage('Build and Install') {
                        steps {
                            script {
                              echo 'Starting Build ,params.EXECUTE_JAR=true!'
                              sh 'mvn clean package -DskipTests'
                              // Obtener el nombre del archivo JAR generado
                              //def jarFile =  sh(script: "ls target/*.jar", returnStdout: true).trim()
                               def artifactPath = sh(script: "find target -name '*.jar'", returnStdout: true).trim()
                              NAME_ARTEFACT = jarFile
                              echo "Artifact generated: ${NAME_ARTEFACT}"
                            }
                        }
                    }
    
            stage('Prepare Jacoco') {
                when {
                                expression { params.EXECUTE_JACOCO == 'Yes' }
                            }
                        steps {
                            script {
                            echo 'Iniciar descarga de jacoco'
                                // Ruta donde se almacenar√°n los JARs
                                def jacocoPath = "${env.WORKSPACE}/jacoco"
                                // Crea el directorio si no existe
                                sh "mkdir -p ${jacocoPath}"
                                // Descarga jacocoagent.jar y jacococli.jar
                                sh """
                                    curl -L -o ${jacocoPath}/jacocoagent.jar https://repo1.maven.org/maven2/org/jacoco/org.jacoco.agent/0.8.8/org.jacoco.agent-0.8.8-runtime.jar
                                    curl -L -o ${jacocoPath}/jacococli.jar https://repo1.maven.org/maven2/org/jacoco/org.jacoco.cli/0.8.8/org.jacoco.cli-0.8.8-nodeps.jar
                                """
    
                                // Verifica que los archivos se hayan descargado
                                sh "ls -l ${jacocoPath}"
                                sh 'mvn clean verify -Djacoco.agent.version=0.8.8 -Djacoco.include.from=target/classes -Djacoco.output=target/jacoco'
                                //sh 'mvn ${jacocoPath}:report'
                                /*
                                sh "java -jar ${jacocoPath}/jacococli.jar report jacoco.exec \
                                                                                     --classfiles target/classes \
                                                                                     --sourcefiles src/main/java \
                                                                                     --html target/jacoco-report"
                                                                                     */
                            }
                        }
                    }
    
            /*
            stage('Dependency Analysis') {
                steps {
                    // Run the OWASP Dependency-Check plugin
                    sh 'mvn org.owasp:dependency-check-maven:check'
                }
            }
            */
    
            stage('SonarQube Analysis') {
                when {
                          expression { params.EXECUTE_SONAR == 'Yes' }
                        }
              steps {
                    script {

                    def jarFilterName = NAME_ARTEFACT.replaceAll('[[^a-zA-Z0-9]/.-]', '_')
                    //def jarFilterName = NAME_ARTEFACT.tokenize('/').last().replaceAll(/[^a-zA-Z0-9_]/, '') - '.jar'
                    echo "Nombre del Artifact: ${jarFilterName}"
                    withSonarQubeEnv('SonarQube') {
                       sh "mvn clean verify sonar:sonar \
                             -Dsonar.projectKey= ${jarFilterName} \
                             -Dsonar.projectName= ${jarFilterName} \
                             -Dsonar.projectVersion=${SONAR_PROJECT_VERSION} \
                             -Dsonar.host.url=${SONAR_HOST} \
                             -Dsonar.login=${TOKEN_SONAR}"
                    }
                    }
                }
            }

            stage('Archive') {
                            steps {
                                // Archive the JAR file (adjust the path to your output file as necessary)
                                archiveArtifacts artifacts: 'target/*.jar', fingerprint: true
                            }
            }

            stage('Create and push Docker Imagen/Registry') {
                    when {
                             expression {params.GENERATE_DOCKER == 'Yes' }
                                      }
                                steps {
                                           sh "docker version" // DOCKER_CERT_PATH is automatically picked up by the Docker client
                                           // Loguearse en el registro de Docker (si es necesario)
                                           // sh 'docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD $DOCKER_REGISTRY'

                                           // Etiquetar la imagen
                                           sh "docker tag ${DOCKER_IMAGE_NAME} ${DOCKER_REGISTRY}/${DOCKER_IMAGE_NAME}:latest"

                                           // Subir la imagen al registro Docker
                                           sh "docker push ${DOCKER_REGISTRY}/${DOCKER_IMAGE_NAME}:latest"
                                      }
            }

        }
    }

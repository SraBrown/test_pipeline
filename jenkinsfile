pipeline {
pipeline {
    agent any

    tools {
        maven 'Maven Apache'
    }

    parameters {
        choice(name: 'ENVIRONMENT', choices: ['dev', 'test', 'prod'], description: 'Environment to deploy')
        booleanParam(name: 'EJECUTE_JAR', defaultValue: true, description: 'Enable JAR')
        string(name: 'LANGUAGE', defaultValue: 'JAVA', description: 'Enter your name')
        choice(name: 'EJECUTE_SONAR', choices: ['Yes', 'No'], description: 'Ejecute SONAR?')
    }

    /* environment {
        SONARQUBE_SERVER = 'SonarQube' // Name of the SonarQube server in Jenkins
        SONAR_PROJECT_KEY = 'your-project-key'
        SONAR_PROJECT_NAME = 'Your Project Name'
        SONAR_PROJECT_VERSION = '1.0'
    }*/
    
    stages {
        stage('Checkout') {
            steps {
                 echo 'Checkout the JAR! XM'
                // Replace with your repository URL and credentials if needed
              // git url: 'https://github.com/SraBrown/test_pipeline.git'
                checkout scm
            }
        }

       stage('SonarQube Analysis') {
            when {
                expression { params.EJECUTE_SONAR == 'Yes' }
            }
            steps {
                script {
                    echo 'Running SonarQube analysis...'
                    withSonarQubeEnv('SonarQube Server') { // Replace with your SonarQube server name
                        // Add your SonarQube analysis command here (e.g., sonar-scanner)
                    }
                }
            }
        }


        /*
        stage('SonarQube Analysis') {
                    steps {
                        script {
                            // Run SonarQube analysis
                            def scannerHome = tool 'SonarQube Scanner' // Tool name configured in Jenkins
                            withSonarQubeEnv(SONARQUBE_SERVER) {
                                sh "${scannerHome}/bin/sonar-scanner -Dsonar.projectKey=${SONAR_PROJECT_KEY} -Dsonar.projectName=${SONAR_PROJECT_NAME} -Dsonar.projectVersion=${SONAR_PROJECT_VERSION} -Dsonar.sources=src -Dsonar.host.url=http://your-sonarqube-server -Dsonar.login=your-token"
                            }
                        }
                    }
                }

                stage('Quality Gate') {
                    steps {
                        script {
                            // Wait for SonarQube analysis to finish and check quality gate status
                            timeout(time: 5, unit: 'MINUTES') {
                                waitForQualityGate abortPipeline: true
                            }
                        }
                    }
                }*/

        stage('Archive') {
                    steps {
                        // Archive the JAR file (adjust the path to your output file as necessary)
                        archiveArtifacts artifacts: 'target/*.jar', fingerprint: true
                    }
        }
    }
}

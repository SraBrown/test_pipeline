pipeline {
        agent any
        tools {
           //maven 'Maven Apache'
           maven 'Maven 3.0.1'
        }
        parameters {
            choice(name: 'ENVIRONMENT', choices: ['dev', 'test', 'prod'], description: 'Environment to deploy')
            string(name: 'URL_GIT', defaultValue: 'git@gitlab.opentrends.net:a4012/code/encuestas-backend.git', description: 'Git')
            //string(name: 'URL_GIT', defaultValue: 'https://github.com/SraBrown/test_pipeline.git', description: 'Branch Specifier')
            string(name: 'BRANCH', defaultValue: 'develop', description: 'Branch Specifier')
            string(name: 'GITLAB_CREDENTIALS', defaultValue: 'int-git-jenkins', description: 'Name Token')
            choice(name: 'EXECUTE_SONAR', choices: ['Yes', 'No'], description: 'Execute SONAR?')
            choice(name: 'EXECUTE_JACOCO', choices: ['Yes', 'No'], description: 'Execute JACOCO?')
            string(name: 'JAVA_TOOL', defaultValue: 'JDK-17', description: 'Name java configurted in jenkins')
            choice(name: 'GENERATE_DOCKER', choices: ['Yes', 'No'], description: 'Generate docker imagen?')
            choice(name: 'GENERATE_MICROSERVICE', choices: ['Yes', 'No'], description: 'Generate microservice?')
            string(name: 'SONARQUBE_SERVER', defaultValue: 'SonarQube', description: 'Sonar Specifier')
            string(name: 'SONAR_PROJECT_VERSION', defaultValue: '1.0', description: 'Sonar Specifier')
            string(name: 'SONAR_LOCALHOST', defaultValue: 'http://sonar:9000', description: 'Sonar Localhost')
        }
        environment {
            JAVA_HOME = tool("${params.JAVA_TOOL}") // Configura JAVA_HOME según el parámetro
            PATH = "${JAVA_HOME}/bin:${PATH}" // Ajusta el PATH
            SONARQUBE_SERVER = "${params.SONARQUBE_SERVER}" // Name of the SonarQube server in Jenkins
            SONAR_PROJECT_VERSION = "${params.SONAR_PROJECT_VERSION}"
	        SONAR_HOST = "${params.SONAR_LOCALHOST}"
            TOKEN_SONAR ='squ_65c191c06933b1c3ad3cf7fff9a7b59954f67a00'
            //TOKEN_SONAR ='token_sonar'
            JACOCO_REPORT_PATH = 'target/jacoco.exec'      // Ruta al archivo de cobertura de JaCoCo
            DOCKER_IMAGE_NAME = 'dev.opentrends.net/A4012/spring-cloud-config:latest'
            NAME_ARTEFACT = ''
            ARTIFACT_NAME = ''
            DOCKER_REGISTRY = 'localhost:5000' // Cambia si tienes un registro diferente
            NEXUS_URL = 'https://dev.opentrends.net/nexus'
            NEXUS_CREDENTIALS_ID = 'nexus-credentials' // ID de las credenciales en Jenkins
            NEXUS_REPOSITORY = 'maven-releases'
        }
            stages {

                stage('Checkout') {
                    steps {
                        echo 'Checkout the JAR!'
                        sh 'java -version'
                        checkout scmGit(branches: [[name: '$BRANCH']], extensions: [], userRemoteConfigs:
                                [[credentialsId: "${params.GITLAB_CREDENTIALS}", url: "${params.URL_GIT}"]])

                    }
                }


               stage('Prepare Enviroment Variable') {
                    steps {
                        script {
                            // Extraer información del artefacto usando Maven
                            def pom = readMavenPom file: 'pom.xml'
                            NAME_ARTEFACT = pom.artifactId
                            echo "Artifact Name: ${NAME_ARTEFACT}"
                            def artifactId = NAME_ARTEFACT
                            def version = pom.version
                            def packaging = pom.packaging
                            def artifactPath = "target/${artifactId}-${version}.${packaging}"
                        }
                    }
                }

               stage('Build and Install') {

                        steps {
                           script {
                              echo 'Starting Build ,XMM'
                              sh 'mvn clean package -DskipTests'
                            }
                        }
                    }

            stage('Prepare Jacoco') {
                when {
                                expression { params.EXECUTE_JACOCO == 'Yes' }
                            }
                        steps {
                            script {
                            echo 'Iniciar descarga de jacoco'
                                // Ruta donde se almacenarán los JARs
                                def jacocoPath = "${env.WORKSPACE}/jacoco"
                                // Crea el directorio si no existe
                                sh "mkdir -p ${jacocoPath}"
                                // Descarga jacocoagent.jar y jacococli.jar
                                sh """
                                    curl -L -o ${jacocoPath}/jacocoagent.jar https://repo1.maven.org/maven2/org/jacoco/org.jacoco.agent/0.8.8/org.jacoco.agent-0.8.8-runtime.jar
                                    curl -L -o ${jacocoPath}/jacococli.jar https://repo1.maven.org/maven2/org/jacoco/org.jacoco.cli/0.8.8/org.jacoco.cli-0.8.8-nodeps.jar
                                """

                                // Verifica que los archivos se hayan descargado
                                sh "ls -l ${jacocoPath}"
                                sh 'mvn clean verify -Djacoco.agent.version=0.8.8 -Djacoco.include.from=target/classes -Djacoco.output=target/jacoco'
                                //sh 'mvn ${jacocoPath}:report'
                                /*
                                sh "java -jar ${jacocoPath}/jacococli.jar report jacoco.exec \
                                                                                     --classfiles target/classes \
                                                                                     --sourcefiles src/main/java \
                                                                                     --html target/jacoco-report"
                                                                                     */
                            }
                        }
                    }

            /*
            stage('Dependency Analysis') {
                steps {
                    // Run the OWASP Dependency-Check plugin
                    sh 'mvn org.owasp:dependency-check-maven:check'
                }
            }
            */

            stage('SonarQube Analysis') {
                when {
                          expression { params.EXECUTE_SONAR == 'Yes' }
                        }
              steps {
                    sh "mvn clean verify sonar:sonar \
                             -Dsonar.projectKey=${NAME_ARTEFACT}${SONAR_PROJECT_VERSION} \
                             -Dsonar.projectName=${NAME_ARTEFACT}${SONAR_PROJECT_VERSION} \
                             -Dsonar.projectVersion=${SONAR_PROJECT_VERSION} \
                             -Dsonar.host.url=${SONAR_HOST} \
                             -Dsonar.login=${TOKEN_SONAR}"
                    }
                }


            stage('Create and push Docker Imagen/Registry') {
                steps {
                  script{
                    if (params.GENERATE_MICROSERVICE == 'Yes'){
                                sh "docker version" // DOCKER_CERT_PATH is automatically picked up by the Docker client
                                                   // Loguearse en el registro de Docker (si es necesario)
                                                   // sh 'docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD $DOCKER_REGISTRY'

                                                   // Etiquetar la imagen
                                                   sh "docker tag ${DOCKER_IMAGE_NAME} ${DOCKER_REGISTRY}/${DOCKER_IMAGE_NAME}:latest"

                                                   // Subir la imagen al registro Docker
                                                   sh "docker push ${DOCKER_REGISTRY}/${DOCKER_IMAGE_NAME}:latest"
                                  }
				else {
					script {
				             steps {

                                 // Subir el artefacto al Nexus
                                            nexusArtifactUploader(
                                            nexusVersion: 'nexus3',
                                            protocol: 'https',
                                            nexusUrl: "${NEXUS_URL}",
                                            groupId: "${pom.groupId}",
                                            version: "${version}",
                                            repository: "${NEXUS_REPOSITORY}",
                                            credentialsId: "${NEXUS_CREDENTIALS_ID}",
                                            artifacts: [[
                                            artifactId: "${artifactId}",
                                            classifier: '',
                                            file: artifactPath,
                                            type: "${packaging}"
                                            ]]
                                    )
                               }

				         }
					}
				}
			}
      }
}
}

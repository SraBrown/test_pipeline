pipeline {
    agent any

    tools {
        maven 'Maven Apache'
    }

    parameters {
        choice(name: 'ENVIRONMENT', choices: ['dev', 'test', 'prod'], description: 'Environment to deploy')
        booleanParam(name: 'EJECUTE_JAR', defaultValue: true, description: 'Enable JAR')
        string(name: 'URL_GIT', defaultValue: 'https://github.com/your-repo/your-project.git', description: 'Branch/Tags')
        string(name: 'BRANCH', defaultValue: 'develop', description: 'Branch Specifier')
        choice(name: 'EJECUTE_SONAR', choices: ['Yes', 'No'], description: 'Ejecute SONAR?')
        choice(name: 'EJECUTE_JACOCO', choices: ['Yes', 'No'], description: 'Ejecute JACOCO?')
        string(name: 'JAVA_HOME', defaultValue: '/usr/lib/jvm/java-17-openjdk', description: 'Enter Java')
    }

    environment {
        SONARQUBE_SERVER = 'SonarQube' // Name of the SonarQube server in Jenkins
        SONAR_PROJECT_KEY = 'your-project-key'
        SONAR_PROJECT_NAME = 'Your Project Name'
        SONAR_PROJECT_VERSION = '1.0'
    }

    stages {
        stage('Checkout') {
            steps {
                 echo 'Checkout the JAR! XM'
                checkout scmGit(branches: [[name: '$BRANCH']], extensions: [], userRemoteConfigs:
                 [[credentialsId: 'GITLAB_CREDENTIALS', url: "${params.URL_GIT}"]])
              // git branch: 'main', url: "${params.URL_GIT}"
            }
        }

       stage('SonarQube Analysis') {
            when {
                expression { params.EJECUTE_SONAR == 'Yes' }
            }
            steps {
                script {
                    echo 'Running SonarQube analysis...'
                    withSonarQubeEnv('SonarQube') { // Replace with your SonarQube server name
                        // Add your SonarQube analysis command here (e.g., sonar-scanner)
                    }
                }
            }
        }


        stage('Generate Code Coverage Report') {
            when {
                expression { params.EJECUTE_SONAR == 'Yes' }
            }
            steps {
                // Run JaCoCo integrated with Maven Surefire
                sh 'mvn jacoco:report'
            }
        }

        stage('Dependency Analysis') {
            when {
                expression { params.EJECUTE_SONAR == 'Yes' }
            }
            steps {
                // Run the OWASP Dependency-Check plugin
                sh 'mvn org.owasp:dependency-check-maven:check'
            }
        }

        stage('Build') {
                steps {
                    script {
                        if (params.EJECUTE_JAR) {
                            echo 'Starting Buil, ${params.LANGUAGE}!'
                                sh 'mvn clean install'
                        }
                }
            }
        }


        stage('Archive') {
                    steps {
                        // Archive the JAR file (adjust the path to your output file as necessary)
                        archiveArtifacts artifacts: 'target/*.jar', fingerprint: true
                    }
        }
    }
}

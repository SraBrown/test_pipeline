pipeline {
    agent any

    tools {
        maven 'Maven Apache'
    }
/*
parameters {
        string(name: 'CODE', defaultValue: 'Mr Jenkins', description: 'Who should I say hello to?')
    }*/

 if (params.EJECUTE_JAR) {
        echo 'something'
    }


/*
    environment {
        SONARQUBE_SERVER = 'SonarQube' // Name of the SonarQube server in Jenkins
        SONAR_PROJECT_KEY = 'your-project-key'
        SONAR_PROJECT_NAME = 'Your Project Name'
        SONAR_PROJECT_VERSION = '1.0'
    }*/
    
    stages {
        stage('Checkout') {
            steps {
                 echo 'Checkout the JAR! XM'
                // Replace with your repository URL and credentials if needed
              // git url: 'https://github.com/SraBrown/test_pipeline.git'
                checkout scm
            }
        }

        stage('Build') {
            steps {
                echo 'Inicia Build'
                // Compile the JAR using Maven
                sh 'mvn clean package'
            }
        }
    /*
    stage('SonarQube Analysis') {
                steps {
                    script {
                        // Run SonarQube analysis
                        def scannerHome = tool 'SonarQube Scanner' // Tool name configured in Jenkins
                        withSonarQubeEnv(SONARQUBE_SERVER) {
                            sh "${scannerHome}/bin/sonar-scanner -Dsonar.projectKey=${SONAR_PROJECT_KEY} -Dsonar.projectName=${SONAR_PROJECT_NAME} -Dsonar.projectVersion=${SONAR_PROJECT_VERSION} -Dsonar.sources=src -Dsonar.host.url=http://your-sonarqube-server -Dsonar.login=your-token"
                        }
                    }
                }
            }
    
            stage('Quality Gate') {
                steps {
                    script {
                        // Wait for SonarQube analysis to finish and check quality gate status
                        timeout(time: 5, unit: 'MINUTES') {
                            waitForQualityGate abortPipeline: true
                        }
                    }
                }
            }*/

        stage('Archive') {
                    steps {
                        // Archive the JAR file (adjust the path to your output file as necessary)
                        archiveArtifacts artifacts: 'target/*.jar', fingerprint: true
                    }
        }
    }

    post {
        success {
            echo 'Pipeline was successful!'
        }
        failure {
            echo 'Pipeline failed.'
        }
    }
}


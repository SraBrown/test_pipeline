pipeline {
        agent any
        tools {
           maven "${MAVEN_TOOL}"
        }
        parameters {
            choice(name: 'ENVIRONMENT', choices: ['dev', 'test', 'prod'], description: 'Environment to deploy')
            string(name: 'MAVEN_TOOL', defaultValue: 'Maven 3.0.1', description: 'Maven Tool configurado en Jenkins')
            string(name: 'URL_GIT', defaultValue: 'git@gitlab.opentrends.net:a4012/code/encuestas-backend.git', description: 'Git')
            //string(name: 'URL_GIT', defaultValue: 'https://github.com/SraBrown/test_pipeline.git', description: 'Branch Specifier')
            string(name: 'BRANCH', defaultValue: 'develop', description: 'Branch Specifier')
            string(name: 'GITLAB_CREDENTIALS', defaultValue: 'int-git-jenkins', description: 'Name Token')
            choice(name: 'EXECUTE_SONAR', choices: ['Yes', 'No'], description: 'Execute SONAR?')
            choice(name: 'EXECUTE_JACOCO', choices: ['Yes', 'No'], description: 'Execute JACOCO?')
            string(name: 'JAVA_TOOL', defaultValue: 'JDK-17', description: 'Name java configurted in jenkins')
            choice(name: 'GENERATE_DOCKER', choices: ['Yes', 'No'], description: 'Generate docker imagen?')
            choice(name: 'GENERATE_MICROSERVICE', choices: ['Yes', 'No'], description: 'Generate microservice?')
            string(name: 'SONARQUBE_SERVER', defaultValue: 'SonarQube', description: 'Sonar Specifier')
            string(name: 'SONAR_PROJECT_VERSION', defaultValue: '1.0', description: 'Sonar Specifier')
            string(name: 'SONAR_LOCALHOST', defaultValue: 'http://sonar:9000', description: 'Sonar Localhost')
            string(name: 'NEXUS_URL', defaultValue: 'https://dev.opentrends.net/nexus', description: 'NEXUS_URL')
            string(name: 'NEXUS_CREDENTIALS_ID', defaultValue: 'nexus-credentials', description: 'NEXUS_URL')
            string(name: 'NEXUS_REPOSITORY', defaultValue: 'maven-releases', description: 'NEXUS_URL')
            string(name: 'DOCKER_IMAGE_NAME', defaultValue: 'dev.opentrends.net/A4012/spring-cloud-config:latest', description: 'Docker imagen')
            string(name: 'DOCKER_LOGIN', defaultValue: 'docker-a4012.opentrends.net', description: 'Docker Login')
        }
        environment {
            JAVA_HOME = tool("${params.JAVA_TOOL}") // Configure JAVA_HOME segment parameters
            PATH = "${JAVA_HOME}/bin:${PATH}" // Ajusta el PATH
            SONARQUBE_SERVER = "${params.SONARQUBE_SERVER}" // Name of the SonarQube server in Jenkins
            SONAR_PROJECT_VERSION = "${params.SONAR_PROJECT_VERSION}"
	        SONAR_HOST = "${params.SONAR_LOCALHOST}"
            TOKEN_SONAR ='squ_65c191c06933b1c3ad3cf7fff9a7b59954f67a00'
            //TOKEN_SONAR ='token_sonar'
            JACOCO_REPORT_PATH = 'target/jacoco.exec'      // Ruta al archivo de cobertura de JaCoCo
            NAME_ARTEFACT = ''
            ARTIFACT_PATH = ''
            POM_VERSION = ''
            POM_GROUP_ID = ''
            POM_PACKAGING = ''
            DOCKER_IMAGE_NAME = "${params.DOCKER_IMAGE_NAME}"
            DOCKER_LOGIN = "${params.DOCKER_LOGIN}"
            DOCKER_REGISTRY = 'localhost:5000' // Cambia si tienes un registro diferente
            NEXUS_URL = "${params.NEXUS_URL}"
            NEXUS_CREDENTIALS_ID = "${params.NEXUS_CREDENTIALS_ID}" // ID de las credenciales en Jenkins
            NEXUS_REPOSITORY = "${params.NEXUS_REPOSITORY}"
        }
            stages {
                stage('Checkout') {
                    steps {
                        echo 'Checkout the JAR!'
                        sh 'java -version'
                        checkout scmGit(branches: [[name: '$BRANCH']], extensions: [], userRemoteConfigs:
                                [[credentialsId: "${params.GITLAB_CREDENTIALS}", url: "${params.URL_GIT}"]])

                    }
                }
                stage('Prepare Environment Variable') {
                        steps {
                            script {
                                // Extra information del artefact using Maven
                                def pom = readMavenPom file: 'pom.xml'
                                NAME_ARTEFACT = pom.artifactId
                                echo "Artifact Name: ${NAME_ARTEFACT}"
                                def artifactId = NAME_ARTEFACT
                                POM_VERSION = pom.version
                                POM_PACKAGING = pom.packaging
                                POM_GROUP_ID = pom.groupId
                                def artifactPath = "target/${NAME_ARTEFACT}-${POM_VERSION}.${POM_PACKAGING}"
                                ARTIFACT_PATH = artifactPath
                                echo ARTIFACT_PATH
                            }
                        }
                    }

                   stage('Build and Install') {

                            steps {
                               script {
                                  echo 'Starting Build ,XMM'
                                  sh 'mvn clean package -DskipTests'
                                }
                            }
                   }

                    stage('Prepare Jacoco') {
                        when {
                                        expression { params.EXECUTE_JACOCO == 'Yes' }
                                    }
                                steps {
                                    script {
                                    echo 'Iniciar descarga de jacoco'
                                        // Ruta donde se almacenar√°n los JARs
                                        def jacocoPath = "${env.WORKSPACE}/jacoco"
                                        // Crea el directorio si no existe
                                        sh "mkdir -p ${jacocoPath}"
                                        // Descarga jacocoagent.jar y jacococli.jar
                                        sh """
                                            curl -L -o ${jacocoPath}/jacocoagent.jar https://repo1.maven.org/maven2/org/jacoco/org.jacoco.agent/0.8.8/org.jacoco.agent-0.8.8-runtime.jar
                                            curl -L -o ${jacocoPath}/jacococli.jar https://repo1.maven.org/maven2/org/jacoco/org.jacoco.cli/0.8.8/org.jacoco.cli-0.8.8-nodeps.jar
                                        """

                                        // Verifica que los archivos se hayan descargado
                                        sh "ls -l ${jacocoPath}"
                                        sh 'mvn clean verify -Djacoco.agent.version=0.8.8 -Djacoco.include.from=target/classes -Djacoco.output=target/jacoco'
                                        //sh 'mvn ${jacocoPath}:report'

                                        //sh  ' -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml '

                                    }
                                }
                            }

                    /*
                    stage('Dependency Analysis') {
                        steps {
                            // Run the OWASP Dependency-Check plugin
                            sh 'mvn org.owasp:dependency-check-maven:check'
                        }
                    }
                    */

                    stage('SonarQube Analysis') {
                        when {
                                  expression { params.EXECUTE_SONAR == 'Yes' }
                                }
                      steps {
                            sh "mvn clean verify sonar:sonar \
                                     -Dsonar.projectKey=${NAME_ARTEFACT}${SONAR_PROJECT_VERSION} \
                                     -Dsonar.projectName=${NAME_ARTEFACT}${SONAR_PROJECT_VERSION} \
                                     -Dsonar.projectVersion=${SONAR_PROJECT_VERSION} \
                                     -Dsonar.host.url=${SONAR_HOST} \
                                     -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml \
                                     -Dsonar.login=${TOKEN_SONAR}"
                            }
                        }
                        
                        
                        stage('Quality Gate') {
                                   steps {
                                                   waitForQualityGate abortPipeline: true
                                               }
                         }


                    stage('Create and push Docker Image/Registry') {
                        steps {
                          script{
                            if (params.GENERATE_MICROSERVICE == 'Yes'){
                                        sh "mvn spring-boot:build-image"
                                        echo "docker version" // DOCKER_CERT_PATH is automatically picked up by the Docker client
                                        // Loguearse en el registro de Docker (si es necesario)
                                        // sh 'docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD $DOCKER_REGISTRY'
                                        // Crea el tag
                                        sh "docker tag scc:1.0.0 ${DOCKER_IMAGE_NAME}"
                                        // Subir la imagen al registro Docker
                                        sh "docker login ${DOCKER_LOGIN}"
                                        sh "docker push ${DOCKER_IMAGE_NAME}"
                                     }
                                else {
                                               // Subir el artefact al Nexus
                                               nexusArtifactUploader(
                                               nexusVersion: 'nexus3',
                                               protocol: 'https',
                                               nexusUrl: "${NEXUS_URL}",
                                               groupId: "${POM_GROUP_ID}",
                                               version: "${POM_VERSION}",
                                               repository: "${NEXUS_REPOSITORY}",
                                               credentialsId: "${NEXUS_CREDENTIALS_ID}",
                                               artifacts: [[
                                                   artifactId: "${NAME_ARTEFACT}",
                                                   classifier: '',
                                                   file: "${ARTIFACT_PATH}",
                                                   type: "${POM_PACKAGING}"
                                                   ]]
                                                   )
                                    }
                            }
                    }
      }
    }
}

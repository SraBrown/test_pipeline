pipeline {
    agent any
        
        environment {
        SONARQUBE_SERVER = 'SonarQube' // Name of the SonarQube server in Jenkins
        SONAR_PROJECT_KEY = 'your-project-key'
        SONAR_PROJECT_NAME = 'Your Project Name'
        SONAR_PROJECT_VERSION = '1.0'
                }
        
        stages {

         stage('Checkout') {
                steps {
                    // Checkout the code and Get some code from a GitHub repository
                    git url: 'https://github.com/SraBrown/test_pipeline.git'
                }
            }
            
            stage('Build') {
                steps {
                    script {
                        // Check if Maven is installed and available
                        if (!sh(script: 'mvn -v', returnStatus: true)) {
                            error 'Maven is not installed.'
                        }
                    }
                    sh 'mvn clean install'
                }
            }
            
            stage('Test') {
                steps {
                    // Run tests
                    sh 'mvn test'
                }
            }

            stage('SonarQube Analysis') {
            steps {
                script {
                    // Run SonarQube analysis
                    def scannerHome = tool 'SonarQube Scanner' // Tool name configured in Jenkins
                    withSonarQubeEnv(SONARQUBE_SERVER) {
                        sh "${scannerHome}/bin/sonar-scanner -Dsonar.projectKey=${SONAR_PROJECT_KEY} -Dsonar.projectName=${SONAR_PROJECT_NAME} -Dsonar.projectVersion=${SONAR_PROJECT_VERSION} -Dsonar.sources=src -Dsonar.host.url=http://your-sonarqube-server -Dsonar.login=your-token"
                    }
                }
            }
        }

        stage('Quality Gate') {
            steps {
                script {
                    // Wait for SonarQube analysis to finish and check quality gate status
                    timeout(time: 5, unit: 'MINUTES') {
                        waitForQualityGate abortPipeline: true
                    }
                }
            }

            stage('Archive') {
                steps {
                    // Archive the JAR file (adjust the path to your output file as necessary)
                    archiveArtifacts artifacts: 'target/*.jar', fingerprint: true
                }
            }
        }
        
       post {
        success {
            echo 'Pipeline was successful!'
        }
        failure {
            echo 'Pipeline failed.'
        }
    }
}
